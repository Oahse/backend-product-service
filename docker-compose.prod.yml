version: '3.9'

services:
  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    restart: unless-stopped
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s

  elasticsearch-node1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch-node1
    environment:
      - node.name=es-node-1
      - cluster.name=es-cluster
      - cluster.initial_master_nodes=es-node-1,es-node-2,es-node-3
      - discovery.seed_hosts=elasticsearch-node2,elasticsearch-node3
      - network.host=0.0.0.0
      - xpack.security.enabled=false  # disable auth for dev (enable for prod)
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data-node1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"   # Expose only one node's HTTP port, or use a load balancer
    networks:
      - webnet
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  elasticsearch-node2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch-node2
    environment:
      - node.name=es-node-2
      - cluster.name=es-cluster
      - cluster.initial_master_nodes=es-node-1,es-node-2,es-node-3
      - discovery.seed_hosts=elasticsearch-node1,elasticsearch-node3
      - network.host=0.0.0.0
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data-node2:/usr/share/elasticsearch/data
    networks:
      - webnet
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  elasticsearch-node3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch-node3
    environment:
      - node.name=es-node-3
      - cluster.name=es-cluster
      - cluster.initial_master_nodes=es-node-1,es-node-2,es-node-3
      - discovery.seed_hosts=elasticsearch-node1,elasticsearch-node2
      - network.host=0.0.0.0
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data-node3:/usr/share/elasticsearch/data
    networks:
      - webnet
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  orders-db:
    image: postgres:16-alpine
    container_name: orders-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    
    volumes:
      - orders-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5433:5433"
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  products-db:
    image: postgres:16-alpine
    container_name: products-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    
    volumes:
      - products-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  productsservice:
    build:
      context: .
      dockerfile: ./products/Dockerfile.dev
    container_name: productsservice
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - webnet
    volumes:
      - ./products:/usr/src/app
    env_file:
      - .env
    working_dir: /usr/src/app
    restart: unless-stopped

  orderservice:
    build:
      context: .
      dockerfile: ./orders/Dockerfile.dev
    container_name: orderservice
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      
    ports:
      - "8001:8001"
    networks:
      - webnet
    volumes:
      - ./orders:/usr/src/app
    env_file:
      - .env
    working_dir: /usr/src/app
    restart: unless-stopped



networks:
  webnet:
    driver: bridge

volumes:
  products-db-data:
  orders-db-data:
  redis-data:
  elasticsearch-data-node1:
  elasticsearch-data-node2:
  elasticsearch-data-node3:
    
