
services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - webnet
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s

  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092  # <== important for inter-container comm
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
    restart: unless-stopped
    networks:
      - webnet
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disable auth for dev
    restart: unless-stopped
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - webnet
    healthcheck:
      test: curl -fs http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  
  orders-db:
    image: postgres:16-alpine
    container_name: orders-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    
    volumes:
      - orders-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5433:5433"
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  products-db:
    image: postgres:16-alpine
    container_name: products-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    
    volumes:
      - products-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  productsservice:
    build:
      context: .
      dockerfile: ./products/Dockerfile.dev
    container_name: productsservice
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - webnet
    volumes:
      - ./products:/usr/src/app
    env_file:
      - .env
    working_dir: /usr/src/app
    restart: unless-stopped

  orderservice:
    build:
      context: .
      dockerfile: ./orders/Dockerfile.dev
    container_name: orderservice
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      
    ports:
      - "8001:8001"
    networks:
      - webnet
    volumes:
      - ./orders:/usr/src/app
    env_file:
      - .env
    working_dir: /usr/src/app
    restart: unless-stopped


networks:
  webnet:
    driver: bridge

volumes:
  products-db-data:
  orders-db-data:
  elasticsearch-data:
  redis-data:
